import{createRequire as k}from"node:module";import{tex as x}from"@mdit/plugin-tex";import i from"katex";const c=e=>e.replace(/&/gu,"&amp;").replace(/</gu,"&lt;").replace(/>/gu,"&gt;").replace(/"/gu,"&quot;").replace(/'/gu,"&#039;"),S=k(import.meta.url),y=(e,t,n)=>{let r;try{r=i.renderToString(e,{...t,displayMode:!1})}catch(o){t.throwOnError&&console.warn(o),r=`<span class='katex-error' title='${c(o.toString())}'>${c(e)}</span>`}return n?.(r,!1)??r},$=(e,t,n)=>{let r;try{r=`<p class='katex-block'>${i.renderToString(e,{...t,displayMode:!0})}</p>
`}catch(o){t.throwOnError&&console.warn(o),r=`<p class='katex-block katex-error' title='${c(o.toString())}'>${c(e)}</p>
`}return n?.(r,!0)??r},f=(e,t={})=>{const{allowInlineWithSpace:n=!1,mathFence:r=!1,mhchem:o=!1,logger:s=a=>a==="newLineInDisplayMode"?"ignore":"warn",transformer:l,...m}=t;o&&S("katex/contrib/mhchem"),e.use(x,{allowInlineWithSpace:n,mathFence:r,render:(a,g,h)=>{const p={strict:(u,w,d)=>s(u,w,d,h)??"ignore",throwOnError:!1,...m};return g?$(a,p,l):y(a,p,l)}})};export{f as katex};
//# sourceMappingURL=index.js.map
